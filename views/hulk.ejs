<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Brick Breaker</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-image: url(hulkBag.jpg);
            background-size: 100% 799px;
        }

        .container {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .game-wrapper {
            margin-right: 20px; /* Adjust as needed */
        }

        .image-wrapper img {
            width: 400px; /* Adjust the width of the image */
            position: relative;
            top: 150px;
            left: 250px;
            height: 500px; /* Maintain aspect ratio */
        }

        canvas {
            border: 1px solid black;
            background-color: #f30000;
            background: none;
        }

        #navbar{
            background-color: rgba(0, 0, 0, 0.5);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
            display: flex;
            position: absolute;
            top: 0px;
            width: 100%;
            justify-content: center;
            height: 60px;
            padding-top:8px ;
            padding-bottom: 10px;
        }

    #navbar div{
    margin: 15px;
    height: 20px;
    border-radius: 20px;
    padding: 5px;
    background-color: rgb(233, 237, 228);
    will-change: filter, transform; /* Added transform */
    transition: filter 300ms, transform 300ms; /* Added transform to the transition */
}

#navbar div:hover{
    margin: 15px;
    border-radius: 20px;
    padding: 5px;
    background-color: rgb(233, 237, 228);
    transform: translateY(-10px) translateZ(2px);
    filter: drop-shadow(0 0 0.5em rgb(255, 255, 255)); /* Adjusted shadow size for a subtle effect */
    transform: scale(1.1); /* Added scale on hover for a slight zoom effect */
}

#navbar div a{
    margin: 15px;
    text-decoration: none;
    color: black;
}

.Heading img{
    margin: 0px;
    height: 180px;
    width: 180px;
    position: relative;
    left: -180px;
    top: -250px;
    opacity: 70%;
}

.Heading h2{
    position: absolute;
    left: 30px;
    top: 100px;
    font-size: 34px;
    font-weight: 600;
    /* transform: rotateX(40deg); */
    color: rgb(255, 255, 255);
}
    </style>
</head>

<body>
    <div id="navbar">
        <div>
        <a href="">Social Verse</a>
        </div>
    <div>   
    <a href="">Gaming Verse</a>
    </div> 
        <div>
            <a href="">Exclusive Verse</a>
        </div>
    </div>
    <div class="Heading">
        <h2>Hulk the breaker</h2>
        <img src="hulkPunch.png" alt="">
    </div>
    <div class="container">
        <div class="game-wrapper">
            <canvas id="gameCanvas" width="650" height="320"></canvas>
        </div>
        <div class="image-wrapper">
            <!-- Add your additional image here -->
            <img src="hulkkk.png" alt="Your Image">
        </div>
    </div>
    <script>
        // Get canvas and context
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");

        // Ball properties // ball speed
        let x = canvas.width / 2;
        let y = canvas.height - 30;
        let dx = 1;
        let dy = -1;
        const ballRadius = 10;

        // Paddle properties
        const paddleHeight = 10;
        const paddleWidth = 75;
        let paddleX = (canvas.width - paddleWidth) / 2;

        // Control variables
        let rightPressed = false;
        let leftPressed = false;

        // Brick properties
        const brickRowCount = 5;
        const brickColumnCount = 7;
        const brickWidth = 75;
        const brickHeight = 20;
        const brickPadding = 10;
        const brickOffsetTop = 30;
        const brickOffsetLeft = 30;
        const bricks = [];

        for (let c = 0; c < brickColumnCount; c++) {
            bricks[c] = [];
            for (let r = 0; r < brickRowCount; r++) {
                bricks[c][r] = { x: 0, y: 0, status: 1 };
            }
        }

        // Event listeners for paddle control
        document.addEventListener("keydown", keyDownHandler, false);
        document.addEventListener("keyup", keyUpHandler, false);

        function keyDownHandler(e) {
            if (e.key === "Right" || e.key === "ArrowRight") {
                rightPressed = true;
            } else if (e.key === "Left" || e.key === "ArrowLeft") {
                leftPressed = true;
            }
        }

        function keyUpHandler(e) {
            if (e.key === "Right" || e.key === "ArrowRight") {
                rightPressed = false;
            } else if (e.key === "Left" || e.key === "ArrowLeft") {
                leftPressed = false;
            }
        }

        // Collision detection for bricks
        function collisionDetection() {
            for (let c = 0; c < brickColumnCount; c++) {
                for (let r = 0; r < brickRowCount; r++) {
                    const brick = bricks[c][r];
                    if (brick.status === 1) {
                        if (x > brick.x && x < brick.x + brickWidth && y > brick.y && y < brick.y + brickHeight) {
                            dy = -dy;
                            brick.status = 0;
                        }
                    }
                }
            }
        }

        // Draw the ball
        function drawBall() {
            ctx.beginPath();
            ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
            ctx.fillStyle = "#0095DD";
            ctx.fill();
            ctx.closePath();
        }

        // Draw the paddle
        function drawPaddle() {
            ctx.beginPath();
            ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
            ctx.fillStyle = "#0095DD";
            ctx.fill();
            ctx.closePath();
        }

        // Draw bricks
        function drawBricks() {
            for (let c = 0; c < brickColumnCount; c++) {
                for (let r = 0; r < brickRowCount; r++) {
                    if (bricks[c][r].status === 1) {
                        const brickX = c * (brickWidth + brickPadding) + brickOffsetLeft;
                        const brickY = r * (brickHeight + brickPadding) + brickOffsetTop;
                        bricks[c][r].x = brickX;
                        bricks[c][r].y = brickY;
                        ctx.beginPath();
                        ctx.rect(brickX, brickY, brickWidth, brickHeight);
                        ctx.fillStyle = "#0095DD";
                        ctx.fill();
                        ctx.closePath();
                    }
                }
            }
        }

        // Draw the game
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawBricks();
            drawBall();
            drawPaddle();
            collisionDetection();

            // Ball movement
            x += dx;
            y += dy;

            // Ball collision with walls
            if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {
                dx = -dx;
            }
            if (y + dy < ballRadius) {
                dy = -dy;
            } else if (y + dy > canvas.height - ballRadius) {
                if (x > paddleX && x < paddleX + paddleWidth) {
                    dy = -dy;
                } else {
                    document.location.reload();
                    alert("Game Over");
                }
            }

            // Paddle movement
            if (rightPressed && paddleX < canvas.width - paddleWidth) {
                paddleX += 7;
            } else if (leftPressed && paddleX > 0) {
                paddleX -= 7;
            }

            requestAnimationFrame(draw);
        }

        // Start the game
        draw();

    </script>
</body>

</html>
